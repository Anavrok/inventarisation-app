{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CrudService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.REST_API = 'http://127.0.0.1:8000/api/products';\n    this.httpHeaders = new HttpHeaders().set('Content-Type', 'application/json');\n  }\n  addProduct(data) {\n    let API_URL = `${this.REST_API}`;\n    return this.httpClient.post(API_URL, data).pipe(catchError(this.handleError));\n  }\n  getProducts() {\n    return this.httpClient.get(`${this.REST_API}`);\n  }\n  getProduct(id) {\n    let API_URL = `${this.REST_API}/${id}`;\n    return this.httpClient.get(API_URL, {\n      headers: this.httpHeaders\n    }).pipe(map(res => {\n      return res || {};\n    }), catchError(this.handleError));\n  }\n  updateProduct(id, data) {\n    let API_URL = `${this.REST_API}/${id}`;\n    return this.httpClient.put(API_URL, data, {\n      headers: this.httpHeaders\n    }).pipe(catchError(this.handleError));\n  }\n  deleteProduct(id) {\n    let API_URL = `${this.REST_API}/${id}`;\n    return this.httpClient.delete(API_URL, {\n      headers: this.httpHeaders\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\n Message: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n}\nCrudService.ɵfac = function CrudService_Factory(t) {\n  return new (t || CrudService)(i0.ɵɵinject(i1.HttpClient));\n};\nCrudService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CrudService,\n  factory: CrudService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAAqBC,WAAW,QAA2B,sBAAsB;;;AAKjF,OAAM,MAAOC,WAAW;EAMtBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAJ9B,aAAQ,GAAW,oCAAoC;IAEvD,gBAAW,GAAG,IAAIH,WAAW,EAAE,CAACI,GAAG,CAAC,cAAc,EAAC,kBAAkB,CAAC;EAExB;EAE9CC,UAAU,CAACC,IAAa;IACtB,IAAIC,OAAO,GAAG,GAAG,IAAI,CAACC,QAAQ,EAAE;IAChC,OAAO,IAAI,CAACL,UAAU,CAACM,IAAI,CAACF,OAAO,EAACD,IAAI,CAAC,CACxCI,IAAI,CACHb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAAC;EACjC;EAEAC,WAAW;IACT,OAAO,IAAI,CAACT,UAAU,CAACU,GAAG,CAAC,GAAG,IAAI,CAACL,QAAQ,EAAE,CAAC;EAChD;EAEAM,UAAU,CAACC,EAAO;IAChB,IAAIR,OAAO,GAAG,GAAG,IAAI,CAACC,QAAQ,IAAIO,EAAE,EAAE;IACtC,OAAO,IAAI,CAACZ,UAAU,CAACU,GAAG,CAACN,OAAO,EAAE;MAACS,OAAO,EAAE,IAAI,CAACC;IAAW,CAAC,CAAC,CAC/DP,IAAI,CAACZ,GAAG,CAAEoB,GAAQ,IAAG;MACpB,OAAOA,GAAG,IAAI,EAAE;IAClB,CAAC,CAAC,EACArB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAAC;EACjC;EAEAQ,aAAa,CAACJ,EAAO,EAAET,IAAa;IAClC,IAAIC,OAAO,GAAG,GAAG,IAAI,CAACC,QAAQ,IAAIO,EAAE,EAAE;IACtC,OAAO,IAAI,CAACZ,UAAU,CAACiB,GAAG,CAACb,OAAO,EAAED,IAAI,EAAE;MAACU,OAAO,EAAE,IAAI,CAACC;IAAW,CAAC,CAAC,CACrEP,IAAI,CAACb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAAC;EACrC;EAEAU,aAAa,CAACN,EAAO;IACnB,IAAIR,OAAO,GAAG,GAAG,IAAI,CAACC,QAAQ,IAAIO,EAAE,EAAE;IACtC,OAAO,IAAI,CAACZ,UAAU,CAACmB,MAAM,CAACf,OAAO,EAAE;MAACS,OAAO,EAAE,IAAI,CAACC;IAAW,CAAC,CAAC,CAClEP,IAAI,CAACb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAAC;EACrC;EAEAA,WAAW,CAACY,KAAuB;IACjC,IAAIC,YAAY,GAAG,EAAE;IACrB,IAAGD,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAC;MACnCD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAI;MACHF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,eAAeJ,KAAK,CAACG,OAAO,EAAE;;IAE1EE,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;IACzB,OAAOzB,UAAU,CAACyB,YAAY,CAAC;EACjC;;AAjDWvB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA6B,SAAX7B,WAAW;EAAA8B,YAFV;AAAM","names":["catchError","map","throwError","HttpHeaders","CrudService","constructor","httpClient","set","addProduct","data","API_URL","REST_API","post","pipe","handleError","getProducts","get","getProduct","id","headers","httpHeaders","res","updateProduct","put","deleteProduct","delete","error","errorMessage","ErrorEvent","message","status","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\frontend\\src\\app\\service\\crud.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Product } from './Product';\nimport { catchError, map } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CrudService {\n\n  REST_API: string = 'http://127.0.0.1:8000/api/products';\n\n  httpHeaders = new HttpHeaders().set('Content-Type','application/json');\n\n  constructor(private httpClient: HttpClient) { }\n\n  addProduct(data: Product): Observable<any>{\n    let API_URL = `${this.REST_API}`;\n    return this.httpClient.post(API_URL,data)\n    .pipe(\n      catchError(this.handleError))\n  }\n\n  getProducts(){\n    return this.httpClient.get(`${this.REST_API}`);\n  }\n\n  getProduct(id: any): Observable<any>{\n    let API_URL = `${this.REST_API}/${id}`;\n    return this.httpClient.get(API_URL, {headers: this.httpHeaders})\n    .pipe(map((res: any)=>{\n      return res || {}\n    }),\n      catchError(this.handleError))\n  }\n\n  updateProduct(id: any, data: Product): Observable<any>{\n    let API_URL = `${this.REST_API}/${id}`;\n    return this.httpClient.put(API_URL, data, {headers: this.httpHeaders})\n    .pipe(catchError(this.handleError))\n  }\n\n  deleteProduct(id: any): Observable<any>{\n    let API_URL = `${this.REST_API}/${id}`;\n    return this.httpClient.delete(API_URL, {headers: this.httpHeaders})\n    .pipe(catchError(this.handleError))\n  }\n\n  handleError(error:HttpErrorResponse){\n    let errorMessage = '';\n    if(error.error instanceof ErrorEvent){\n      errorMessage = error.error.message;\n    }else{\n      errorMessage = `Error Code: ${error.status}\\n Message: ${error.message}`;\n    }\n    console.log(errorMessage);\n    return throwError(errorMessage);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}